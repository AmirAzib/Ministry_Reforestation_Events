{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://127.0.0.1:8000\"; // Replace with your backend's URL\n\n// Register user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || \"Registration failed\";\n  }\n};\n\n// Login user\nexport const loginUser = async credentials => {\n  try {\n    // Format data as required by the backend (x-www-form-urlencoded)\n    const loginData = new URLSearchParams();\n    loginData.append(\"username\", credentials.email); // Assuming credentials has an email field\n    loginData.append(\"password\", credentials.password);\n    const response = await axios.post(`${API_BASE_URL}/users/login`, loginData, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || \"Login failed\";\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","registerUser","userData","response","post","data","error","_error$response","_error$response$data","detail","loginUser","credentials","loginData","URLSearchParams","append","email","password","headers","_error$response2","_error$response2$data"],"sources":["C:/Users/aziba/OneDrive/Bureau/Ministry_Reforestation_Events/reforestation-frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://127.0.0.1:8000\"; // Replace with your backend's URL\r\n\r\n// Register user\r\nexport const registerUser  = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data?.detail || \"Registration failed\";\r\n  }\r\n};\r\n\r\n// Login user\r\nexport const loginUser  = async (credentials) => {\r\n  try {\r\n    // Format data as required by the backend (x-www-form-urlencoded)\r\n    const loginData = new URLSearchParams();\r\n    loginData.append(\"username\", credentials.email); // Assuming credentials has an email field\r\n    loginData.append(\"password\", credentials.password);\r\n\r\n    const response = await axios.post(`${API_BASE_URL}/users/login`, loginData, {\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response?.data?.detail || \"Login failed\";\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB,CAAC,CAAC;;AAE9C;AACA,OAAO,MAAMC,YAAY,GAAI,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,iBAAiB,EAAEE,QAAQ,CAAC;IAC7E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,MAAM,EAAAD,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBC,MAAM,KAAI,qBAAqB;EAC7D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAI,MAAOC,WAAW,IAAK;EAC/C,IAAI;IACF;IACA,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAAC,CAAC;IACvCD,SAAS,CAACE,MAAM,CAAC,UAAU,EAAEH,WAAW,CAACI,KAAK,CAAC,CAAC,CAAC;IACjDH,SAAS,CAACE,MAAM,CAAC,UAAU,EAAEH,WAAW,CAACK,QAAQ,CAAC;IAElD,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,YAAY,cAAc,EAAEY,SAAS,EAAE;MAC1EK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC;IACjE,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAY,gBAAA,EAAAC,qBAAA;IACd,MAAM,EAAAD,gBAAA,GAAAZ,KAAK,CAACH,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBb,IAAI,cAAAc,qBAAA,uBAApBA,qBAAA,CAAsBV,MAAM,KAAI,cAAc;EACtD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}